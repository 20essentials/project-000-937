const p="modulepreload",E=function(n){return"/"+n},d={},w=function(m,a,P){let i=Promise.resolve();if(a&&a.length>0){let o=function(e){return Promise.all(e.map(c=>Promise.resolve(c).then(s=>({status:"fulfilled",value:s}),s=>({status:"rejected",reason:s}))))};document.getElementsByTagName("link");const t=document.querySelector("meta[property=csp-nonce]"),u=t?.nonce||t?.getAttribute("nonce");i=o(a.map(e=>{if(e=E(e),e in d)return;d[e]=!0;const c=e.endsWith(".css"),s=c?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${e}"]${s}`))return;const r=document.createElement("link");if(r.rel=c?"stylesheet":p,c||(r.as="script"),r.crossOrigin="",r.href=e,u&&r.setAttribute("nonce",u),document.head.appendChild(r),c)return new Promise((f,h)=>{r.addEventListener("load",f),r.addEventListener("error",()=>h(new Error(`Unable to preload CSS for ${e}`)))})}))}function l(o){const t=new Event("vite:preloadError",{cancelable:!0});if(t.payload=o,window.dispatchEvent(t),!t.defaultPrevented)throw o}return i.then(o=>{for(const t of o||[])t.status==="rejected"&&l(t.reason);return m().catch(l)})},v=window.matchMedia("(min-width: 1200px)").matches;v&&w(async()=>{const{ParallaxEffect:n}=await import("./parallax.Nrd59-Nu.js");return{ParallaxEffect:n}},[]).then(({ParallaxEffect:n})=>new n({containerSelector:".parallax-container",childsSelector:".parallax",maxDisplacement:50})).catch(n=>console.error(n));
